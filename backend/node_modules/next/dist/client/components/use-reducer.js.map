{"version":3,"sources":["../../../src/client/components/use-reducer.ts"],"sourcesContent":["import type { Dispatch } from 'react'\nimport React, { use } from 'react'\nimport { useCallback } from 'react'\nimport type {\n  AppRouterState,\n  ReducerActions,\n  ReducerState,\n} from './router-reducer/router-reducer-types'\nimport type { AppRouterActionQueue } from '../../shared/lib/router/action-queue'\nimport { isThenable } from '../../shared/lib/is-thenable'\n\nexport function useUnwrapState(state: ReducerState): AppRouterState {\n  // reducer actions can be async, so sometimes we need to suspend until the state is resolved\n  if (isThenable(state)) {\n    const result = use(state)\n    return result\n  }\n\n  return state\n}\n\nexport function useReducer(\n  actionQueue: AppRouterActionQueue\n): [ReducerState, Dispatch<ReducerActions>] {\n  const [state, setState] = React.useState<ReducerState>(actionQueue.state)\n\n  const dispatch = useCallback(\n    (action: ReducerActions) => {\n      actionQueue.dispatch(action, setState)\n    },\n    [actionQueue]\n  )\n\n  return [state, dispatch]\n}\n"],"names":["useReducer","useUnwrapState","state","isThenable","result","use","actionQueue","setState","React","useState","dispatch","useCallback","action"],"mappings":";;;;;;;;;;;;;;;IAqBgBA,UAAU;eAAVA;;IAVAC,cAAc;eAAdA;;;;iEAVW;4BAQA;AAEpB,SAASA,eAAeC,KAAmB;IAChD,4FAA4F;IAC5F,IAAIC,IAAAA,sBAAU,EAACD,QAAQ;QACrB,MAAME,SAASC,IAAAA,UAAG,EAACH;QACnB,OAAOE;IACT;IAEA,OAAOF;AACT;AAEO,SAASF,WACdM,WAAiC;IAEjC,MAAM,CAACJ,OAAOK,SAAS,GAAGC,cAAK,CAACC,QAAQ,CAAeH,YAAYJ,KAAK;IAExE,MAAMQ,WAAWC,IAAAA,kBAAW,EAC1B,CAACC;QACCN,YAAYI,QAAQ,CAACE,QAAQL;IAC/B,GACA;QAACD;KAAY;IAGf,OAAO;QAACJ;QAAOQ;KAAS;AAC1B"}