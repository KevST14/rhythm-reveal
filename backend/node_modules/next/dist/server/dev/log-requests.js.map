{"version":3,"sources":["../../../src/server/dev/log-requests.ts"],"sourcesContent":["import {\n  blue,\n  bold,\n  gray,\n  green,\n  red,\n  white,\n  yellow,\n} from '../../lib/picocolors'\nimport { stripNextRscUnionQuery } from '../../lib/url'\nimport type { FetchMetric } from '../base-http'\nimport type { NodeNextRequest, NodeNextResponse } from '../base-http/node'\nimport type { LoggingConfig } from '../config-shared'\nimport { getRequestMeta } from '../request-meta'\n\nexport interface RequestLoggingOptions {\n  readonly request: NodeNextRequest\n  readonly response: NodeNextResponse\n  readonly loggingConfig: LoggingConfig | undefined\n  readonly requestDurationInMs: number\n}\n\nexport function logRequests(options: RequestLoggingOptions): void {\n  const { request, response, loggingConfig, requestDurationInMs } = options\n\n  logIncomingRequest({\n    request,\n    requestDurationInMs,\n    statusCode: response.statusCode,\n  })\n\n  if (request.fetchMetrics) {\n    for (const fetchMetric of request.fetchMetrics) {\n      logFetchMetric(fetchMetric, loggingConfig)\n    }\n  }\n}\n\ninterface IncomingRequestOptions {\n  readonly request: NodeNextRequest\n  readonly requestDurationInMs: number\n  readonly statusCode: number\n}\n\nfunction logIncomingRequest(options: IncomingRequestOptions): void {\n  const { request, requestDurationInMs, statusCode } = options\n  const isRSC = getRequestMeta(request, 'isRSCRequest')\n  const url = isRSC ? stripNextRscUnionQuery(request.url) : request.url\n\n  const statusCodeColor =\n    statusCode < 200\n      ? white\n      : statusCode < 300\n        ? green\n        : statusCode < 400\n          ? blue\n          : statusCode < 500\n            ? yellow\n            : red\n\n  const coloredStatus = statusCodeColor(statusCode.toString())\n\n  return writeLine(\n    `${request.method} ${url} ${coloredStatus} in ${requestDurationInMs}ms`\n  )\n}\n\nfunction logFetchMetric(\n  fetchMetric: FetchMetric,\n  loggingConfig: LoggingConfig | undefined\n): void {\n  let {\n    cacheReason,\n    cacheStatus,\n    cacheWarning,\n    end,\n    method,\n    start,\n    status,\n    url,\n  } = fetchMetric\n\n  if (cacheStatus === 'hmr' && !loggingConfig?.fetches?.hmrRefreshes) {\n    // Cache hits during HMR refreshes are intentionally not logged, unless\n    // explicitly enabled in the logging config.\n    return\n  }\n\n  if (loggingConfig?.fetches) {\n    if (url.length > 48 && !loggingConfig.fetches.fullUrl) {\n      url = truncateUrl(url)\n    }\n\n    writeLine(\n      white(\n        `${method} ${url} ${status} in ${Math.round(end - start)}ms ${formatCacheStatus(cacheStatus)}`\n      ),\n      1\n    )\n\n    if (cacheStatus === 'skip' || cacheStatus === 'miss') {\n      writeLine(\n        gray(\n          `Cache ${cacheStatus === 'skip' ? 'skipped' : 'missed'} reason: (${white(cacheReason)})`\n        ),\n        2\n      )\n    }\n  } else if (cacheWarning) {\n    // When logging for fetches is not enabled, we still want to print any\n    // associated warnings, so we print the request first to provide context.\n    writeLine(white(`${method} ${url}`), 1)\n  }\n\n  if (cacheWarning) {\n    writeLine(`${yellow(bold('⚠'))} ${white(cacheWarning)}`, 2)\n  }\n}\n\nfunction writeLine(text: string, indentationLevel = 0): void {\n  process.stdout.write(` ${'│ '.repeat(indentationLevel)}${text}\\n`)\n}\n\nfunction truncate(text: string, maxLength: number): string {\n  return maxLength !== undefined && text.length > maxLength\n    ? text.substring(0, maxLength) + '..'\n    : text\n}\n\nfunction truncateUrl(url: string): string {\n  const { protocol, host, pathname, search } = new URL(url)\n\n  return (\n    protocol +\n    '//' +\n    truncate(host, 16) +\n    truncate(pathname, 24) +\n    truncate(search, 16)\n  )\n}\n\nfunction formatCacheStatus(cacheStatus: FetchMetric['cacheStatus']): string {\n  switch (cacheStatus) {\n    case 'hmr':\n      return green('(HMR cache)')\n    case 'hit':\n      return green('(cache hit)')\n    default:\n      return yellow(`(cache ${cacheStatus})`)\n  }\n}\n"],"names":["logRequests","options","request","response","loggingConfig","requestDurationInMs","logIncomingRequest","statusCode","fetchMetrics","fetchMetric","logFetchMetric","isRSC","getRequestMeta","url","stripNextRscUnionQuery","statusCodeColor","white","green","blue","yellow","red","coloredStatus","toString","writeLine","method","cacheReason","cacheStatus","cacheWarning","end","start","status","fetches","hmrRefreshes","length","fullUrl","truncateUrl","Math","round","formatCacheStatus","gray","bold","text","indentationLevel","process","stdout","write","repeat","truncate","maxLength","undefined","substring","protocol","host","pathname","search","URL"],"mappings":"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"}