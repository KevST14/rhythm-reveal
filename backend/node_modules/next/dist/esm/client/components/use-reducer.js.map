{"version":3,"sources":["../../../src/client/components/use-reducer.ts"],"sourcesContent":["import type { Dispatch } from 'react'\nimport React, { use } from 'react'\nimport { useCallback } from 'react'\nimport type {\n  AppRouterState,\n  ReducerActions,\n  ReducerState,\n} from './router-reducer/router-reducer-types'\nimport type { AppRouterActionQueue } from '../../shared/lib/router/action-queue'\nimport { isThenable } from '../../shared/lib/is-thenable'\n\nexport function useUnwrapState(state: ReducerState): AppRouterState {\n  // reducer actions can be async, so sometimes we need to suspend until the state is resolved\n  if (isThenable(state)) {\n    const result = use(state)\n    return result\n  }\n\n  return state\n}\n\nexport function useReducer(\n  actionQueue: AppRouterActionQueue\n): [ReducerState, Dispatch<ReducerActions>] {\n  const [state, setState] = React.useState<ReducerState>(actionQueue.state)\n\n  const dispatch = useCallback(\n    (action: ReducerActions) => {\n      actionQueue.dispatch(action, setState)\n    },\n    [actionQueue]\n  )\n\n  return [state, dispatch]\n}\n"],"names":["React","use","useCallback","isThenable","useUnwrapState","state","result","useReducer","actionQueue","setState","useState","dispatch","action"],"mappings":"AACA,OAAOA,SAASC,GAAG,QAAQ,QAAO;AAClC,SAASC,WAAW,QAAQ,QAAO;AAOnC,SAASC,UAAU,QAAQ,+BAA8B;AAEzD,OAAO,SAASC,eAAeC,KAAmB;IAChD,4FAA4F;IAC5F,IAAIF,WAAWE,QAAQ;QACrB,MAAMC,SAASL,IAAII;QACnB,OAAOC;IACT;IAEA,OAAOD;AACT;AAEA,OAAO,SAASE,WACdC,WAAiC;IAEjC,MAAM,CAACH,OAAOI,SAAS,GAAGT,MAAMU,QAAQ,CAAeF,YAAYH,KAAK;IAExE,MAAMM,WAAWT,YACf,CAACU;QACCJ,YAAYG,QAAQ,CAACC,QAAQH;IAC/B,GACA;QAACD;KAAY;IAGf,OAAO;QAACH;QAAOM;KAAS;AAC1B"}